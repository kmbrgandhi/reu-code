Timer unit: 1e-06 s

Total time: 8.6616 s
File: genetic_binary_doppler.py
Function: anneal at line 128

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   128                                               temperature = init_temperature
   129         1            2      2.0      0.0      psl = fast_autocorrelations(code, N)
   130         1            1      1.0      0.0      count = 0
   131         1          998    998.0      0.0      beta = 1.5
   132         1            1      1.0      0.0      kappa = 0.2
   133         1            1      1.0      0.0      num_gen = 20* len(code)
   134         1            0      0.0      0.0      best_found = code
   135         1            1      1.0      0.0      best_psl = psl
   136         1            1      1.0      0.0      stuck_count = 0
   137         1            1      1.0      0.0      num_temp_gens = int(2*init_temperature)
   138         1            1      1.0      0.0      upp_bound = 2*len(code)**(kappa)
   139         1            1      1.0      0.0      for j in range(1, num_temp_gens):
   140         1            2      2.0      0.0          for i in range(num_gen):
   141        60           29      0.5      0.0              new_code = gen_neighbor(code, 2)
   142     17759         8138      0.5      0.1              new_psl = fast_autocorrelations(new_code, 5)
   143     17700       230930     13.0      2.7              if new_psl < psl:
   144     17700      8336874    471.0     96.3                  code = new_code
   145     17700        12913      0.7      0.1                  stuck_count = 0 
   146      5620         2810      0.5      0.0                  if new_psl < best_psl:
   147      5620         2402      0.4      0.0                      best_found = new_code
   148      5620         2745      0.5      0.0                      best_psl = new_psl
   149         7            3      0.4      0.0              else:
   150         7            3      0.4      0.0                  if acceptance_probability(psl, new_psl, temperature) > random.random():
   151                                                               code = new_code
   152     12080        42202      3.5      0.5                      stuck_count = 0
   153     11976         6737      0.6      0.1                  else:
   154     11976         5560      0.5      0.1                      stuck_count+=1
   155                                                       if stuck_count>upp_bound:
   156       104           59      0.6      0.0                  count+=1
   157     17700         9160      0.5      0.1                  break
   158                                                   if stuck_count>upp_bound:
   159                                                       break
   160        59           26      0.4      0.0      
   161                                           
   162                                               temperature = init_temperature/(j**(beta))
   163                                           
   164         1            2      2.0      0.0      return (best_found, best_psl)
   165                                           
   166         1            1      1.0      0.0  #@numba.jit        
   167                                           def gen_neighbor(code, movement_length=1):
   168                                               seq_2 = np.copy(code)
   169                                               mut_points = random.sample(range(0, len(seq_2)), movement_length)
   170                                               for i in mut_points:
   171                                                   seq_2[i] = -seq_2[i]
   172                                               return seq_2